; Author: ryban
; RYOS
; Very Very VERY simplistic OS type system


:boot
    JSR initcolor
    JSR displayboot
    SET B, 0x9000
:bootwait
    SUB B, 1
    IFG B, 0
        SET PC, bootwait

    JSR clearscrn
    SET PC, main


;==================================================================

:main
    JSR malloc
    SET J, A
    SET [indat], J

    SET A, [outptr]
    AND [A], 0xf0ff
    BOR [A], [cursorcol]
    SET A, 0

:read
    JSR getchar
    IFE A, 0
        SET PC, read

    IFE A, 8
        SET PC, backspace
    IFE A, 10
        SET PC, react

    SET [J], A
    ADD J, 1

    SET B, [outptr]
    AND [B], 0xf000
    BOR [B], A

    ADD B, 1
    AND [B], 0xf0ff
    BOR [B], [cursorcol]
    SET [outptr], B

    SET PC, read

:backspace
    SET B, [outptr]
    IFE B, [linestart]
        SET PC, read

    SET [B], 0xf020
    SUB B, 1
    SET [B], 0xf020
    BOR [B], [cursorcol]

    SET [outptr], B
    SET PC, mainreset

:react

:mainreset

    SET PC, read

;==================================================================

; clears the screen and displays the OS message at the top
; set thes outptr to the correct starting value

:clearscrn
    SET PUSH, A

    SET A, startmsg
    SET B, 0x8000

:clr1                                       ; loop until message is printed
    AND [B], 0xff80
    BOR [B], [A]
    ADD A, 1
    ADD B, 1

    IFE [A], 0
        SET PC, clr2
    SET PC, clr1
:clr2
    AND [B], 0xff80
    BOR [B], 0x20
    ADD B, 1
    IFG 0x8180, B
        SET PC, clr2

    JSR resetcarrot                     ; set the outptr to the bottom left past the '>'

    SET A, POP
    SET PC, POP

;==================================================================

; Sets the carrot to the bottom left and puts the outptr after it

:resetcarrot
    SET A, [outptr]
    SET [A], 0xf020             ; white text, black background, space

    SET A, [topleft]
    AND [A], 0xff80
    BOR [A], [carrot]
    ADD A, 1
    SET [outptr], A
    SET PC, POP

;==================================================================

;reads in and returns a character in A

:getchar

SET B, [inloc]
ADD B, [inptr]
SET A, [B]
SET [B], 0
ADD B, 1
MOD B, 16
SET [inptr], B
SET PC, POP


;==================================================================

; Returns pointers to 64 word chunks
; maintain a 256 word list of empty 64 word chunks
; when you need a new one you loop through the 256 word list until you find an empty one
; Multiply the index of that marker (from the 256 word array) by 64 to get the address
; the value returned in A is a pointer to the start of the memory

:malloc
    SET A, 0
    SET B, [heaparr]

:l4
    SET C, [B]
    IFE C, 0
        SET PC, found
    IFG A, 0xff                     ; A > 255
        SET PC, full

    ADD A, 1
    ADD B, 1
    SET PC, l4

:found
    ;ADD B, A
    SET [B], 0xffff                 ; mark chunk taken
    MUL A, 0x40                     ; A * 64
    SET B, [heap]
    ADD A, B

    SET PC, POP
:full
    SET A, 0x2000                   ; A hopefully harmless area...
    SET PC, POP

;=================================================================

; releases memory given by malloc.
; This IS NOT automatically done, be sure to free memory when you are done
; A is the pointer to your memory chunk to be freed

:free
    SET B, [heap]
    SUB A, B
    DIV A, 64
    SET B, [heaparr]
    ADD A, B
    SET [A], 0

    SET PC, POP


;=================================================================

; converts a 5 char ascii string to a binary number
; returns the number in A.
; Pointer the NULL terminated string passed in A

:atoi
    SET PUSH, X
    SET PUSH, Y

    SET PUSH, A
    
    JSR slength
    SET C, A                    ; C = legnth of the string
    SET A, POP
    SET Y, 0
    SUB C, 1

:atoi1
    IFE C, 0xffff               ; (0 - 1) = 0xffff (-1)
        SET PC, atoirt
    SET B, 10
    SET X, [A]
    SUB X, 0x30                 ; ascii -> decimal

    ADD A, 1
    SET PUSH, C
    SET PUSH, A
    
    JSR pow

    MUL A, X
    ADD Y, A

    SET A, POP
    SET C, POP

    SUB C, 1

    SET PC, atoi1

:atoirt
    SET A, Y
    SET Y, POP
    SET X, POP
    SET PC, POP

;======================================================================

;returns in A, B^C

:pow
    IFE B, 0
        SET PC, rt0
    IFE C, 0
        SET PC, rt1

    SET PUSH, B
    SUB C, 1

    JSR pow
    MUL A, B

    SET B, POP
    SET PC, POP
:rt1
    SET A, 1
    SET PC, POP

:rt0
    SET A, 0
    SET PC, POP

;====================================================================
; returns the length of a string passed in A

:slength
    SET B, A
    SET A, 0
    IFE [B], 0
        SET PC, POP             ; length 0, return
:sllp
    ADD A, 1
    ADD B, 1
    IFN [B], 0
        SET PC, sllp
    SET PC, POP     

;=================================================================

; Seperates a string into multiple NULL terminated strings at the spaces
; Pass A as the NUL terminated ptr
; Returns the number of strings in A. So the command "echo hello" would return 2

:splitstr
    SET PUSH, B
    SET PUSH, C

    SET C, 1                    ; number of strings

:spl1
    IFE [A], 0
        SET PC, splr
    IFE [A], 0x20               ; [A] == 'space'
        SET [A], 0
    IFE [A], 0
        ADD C, 1

    ADD A, 1
    SET PC, spl1
:splr
    SET A, C
    SET C, POP
    SET B, POP
    SET PC, POP

;=====================================================================
; prints out a number
; A is the number to print

;short A;
;short B;
;char str[6];
;str[5] = 0
;int i = 4; 
;while(A > 0)
;{
;    B = A % 10;
;    str[i] = itoa(B);
;    A /= 10;
;    i--;
;}
; the above c code will make a backwards string of the number A

:printnum
    IFE A, 0
        SET PC, n_zero

    SET PUSH, X
    SET PUSH, A
    JSR malloc                  ; memory for the new string
    SET C, A
    SET X, C
    ADD X, 5
    SET [X], 0
    SUB X, 1

    SET A, POP
:pnl
    SET B, A
    MOD B, 10                   ; B = A % 10
    DIV A, 10                   ; A /= 10
    ADD B, 0x30                 ; itoa(B)
    SET [X], B                  ; str[i] = itoa(B)

    SUB X, 1                    ; i++
    IFN A, 0                    ; while(A > 0)
        SET PC, pnl

    ADD X, 4
:remove_zeros
    IFE [X], 0x30
        SET [X], 0
    IFN [X], 0x30
        SET PC, pnum_done
    SUB X, 1
    SET PC, remove_zeros

:pnum_done
    SET A, C
    JSR printstr
            
    JSR free                    ; deallocate memory

    SET X, POP
    SET PC, POP

:n_zero
    ADD A, 0x30
    JSR printchar
    SET PC, POP

;==================================================================

; Compares two NULL terminated strings and returns a 1 in A if they are equal
; Values passed: A, str1 pointer, B, str2 pointer

:cmpstr
    SET PUSH, X
    SET PUSH, Y

    SET X, A
    SET Y, B
:cmpl
    IFN [X], [Y]
        SET PC, rf                  ; if at anytime two chars are not equal, the strings are not equal

    ADD X, 1
    ADD Y, 1
    IFE [X], 0
        SET PC, chkzero             ; check if y is 0. This they both are return true 
    IFE [Y], 0                      ; return false, x is non 0 while y is
        SET PC, rf

    SET PC, cmpl
:chkzero
    IFE [X], [Y]
        SET PC, rt


:rt
    SET A, 1
    SET Y, POP
    SET X, POP
    SET PC, POP
:rf
    SET A, 0
    SET Y, POP
    SET X, POP
    SET PC, POP

;=======================================================================

; prints out a NULL terminated string
; A should be a pointer to a NULL terminated string

:printstr
    SET PUSH, A
    SET PUSH, B
    SET PUSH, C

    SET C, [outptr]                 ; set c to outptr
:pl  
    SET B, [A]

    IFE B, 0
        SET PC, psrt
    AND [C], 0xff80
    BOR [C], B
    ADD C, 1                        ; incriment the outptr
    ADD A, 1
    SET PC, pl

:psrt                                       ; printstr return
    SET [outptr], C

    SET C, POP
    SET B, POP
    SET A, POP
    SET PC, POP


;==========================================================================

;prints a single char passed in A

:printchar
    SET PUSH, B

    SET B, [outptr]
    AND [B], 0xff80
    BOR [B], A
    ADD B, 1
    SET [outptr], B

    SET B, POP
    SET PC, POP
;==========================================================================

; incriments the random number in seed
; B, C are the min and max of the output
; if C == 0, no bound
; prime1 is 25717
; prime2 is 51437
:nextrand
    SET A, [seed]
    ADD A, 51437
    MUL A, [seed]
    MOD A, 25717
    ADD A, O
    SET [seed], A
    SET PC, POP

;==========================================================================
; seed the RNG with the string passed in A

:srand
    JSR atoi                        ; get the integer value of A

    SET [seed], A

    SET PC, POP

;==========================================================================

; Prints out a random number

:cmdrand
    SET PUSH, A

    JSR nextrand                     ; get a random number
    SET A, [seed]                    ; rand puts new a random number in seed
    JSR printnum                     ; print random number
    ;JSR pushlines
    SET A, POP
    SET PC, POP 
    

;==========================================================================

:displayboot
    SET A, 0

:displayloop
    SET B, 0x8020
    ADD B, A

    SET C, [boot0 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot1 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot2 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot3 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot4 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot5 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot6 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot7 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    SET C, [boot8 + A]
    AND [B], 0xff80
    BOR [B], C
    ADD B, 32

    ADD A, 1
    IFE A, 32
        SET PC, POP

    SET B, 0x100

:displaywait
    SUB B, 1
    IFG B, 0
        SET PC, displaywait
    SET PC, displayloop

;==========================================================================
; initialize the screen color

:initcolor
    SET A, 0x8000
    SET B, 0xf020                   ; white text, black background, space character

:colloop
    SET [A], B
    ADD A, 1
    IFG 0x8180, A
        SET PC, colloop
    SET PC, POP

:outptr     dat 0x8021                      ; the current pointer for text output, should be after the > "text"
:topleft    dat 0x8020                      ; pointer to the top left of the terminal
:cursorcol  dat 0x0800                      ; green background for cursor
:linestart  dat 0x8021

:inloc      dat 0x9000
:inptr      dat 0                           ; location of the keyboard

:heaparr    dat 0x9100                      ; that starting pointer for the heap for malloc
:heap       dat 0x9200                      ; start of the stack of memory addresses

:indat      dat 0                           ; where the pointer to the input string is stored

; Data for use in terminal commands

:carrot     dat ">"      

:startmsg   dat "    ", 10, 10, 10, 10, 10" RYOS v 0.4 "10, 10, 10, 10, 10"    ",0

; Boot screen

:boot0      dat "********************************"
:boot1      dat "*..............................*"
:boot2      dat "*............./****\\...........*"     ; \\ to get rid of escape char. might chagne to the value of a '\' char
:boot3      dat "*............/******\\..........*"
:boot4      dat "*...........|**RYOS**|.........*"
:boot5      dat "*............\\******/..........*"
:boot6      dat "*.............\\****/...........*"
:boot7      dat "*.........................v0.4.*"
:boot8      dat "********************************"




:seed       dat 0xd78e                      ; seed for the random number generator